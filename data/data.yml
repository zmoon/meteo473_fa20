#
# Data descriptions in YAML format
#
# each file needs:
# - name
# - long_name
# - units (optional?)
#   - in form like W m-2 (CF-style: no tex dollar signs, will sub those in later)
# - dims
# - cf_units (only if different from `units`)
# - cf_standard_name (if found)
#
# notes:
# - initial file keys generated by `for f in *.npy; do printf '  %s:\n\n' $f; done`
# - useful reference: https://www2.mmm.ucar.edu/wrf/users/docs/user_guide_V3.8/users_guide_chap5.htm#fields
# - some `long_name`s have tex (`$...$`). could use unicode instead for that?

# alias definitions -- must come first
anchors:
  - &dims_x [lon]
  - &dims_y [lat]
  # - &dims_tyx [time, lat, lon]  # or t, y, x? (dims vs coords)
  # - &dims_tzyx [time, hgt, lat, lon]  # WRF uses names (Time, bottom_top, south_north, west_east) ?
  # until have date/time info:
  - &dims_tyx [lat, lon]
  - &dims_tzyx [hgt, lat, lon]

# we have only been given one time (a snapshot from a WRF sim of Typhoon Haiyan)
# from George: "The original WRF output file included the date and time in the file name. It was 2013-11-07 at 7 Z"
time: 2013-11-07 07:00  # assumed UTC with time zone omitted

# grid is 3 km in horizontal dims (approximately?), 500 m in vertical (index 0 is the surface)

files:
  HFX.npy:
    name: hfx
    long_name: Upward sensible heat flux at the surface
    units: W m-2
    dims: *dims_tyx
    cf_standard_name: surface_upward_sensible_heat_flux

  LANDMASK.npy:
    name: landmask
    long_name: Land mask (1 for land, 0 for water)
    units: ''
    dims: *dims_tyx
    cf_standard_name: land_binary_mask
    cf_units: 1

  LH.npy:
    name: lh
    long_name: Latent heat flux at the surface
    units: W m-2
    dims: *dims_tyx
    cf_standard_name: surface_upward_latent_heat_flux

  OLR.npy:
    name: olr
    long_name: Outgoing longwave radiation at the ToA
    units: W m-2
    dims: *dims_tyx
    cf_standard_name: toa_outgoing_longwave_flux

  PBLH.npy:
    name: pblh
    long_name: PBL height
    units: m
    dims: *dims_tyx
    cf_standard_name: atmosphere_boundary_layer_thickness

  PSFC.npy:
    name: psfc
    long_name: (Atmospheric) surface pressure
    units: Pa
    dims: *dims_tyx
    cf_standard_name: surface_air_pressure

  QRAINcmp.npy:
    name: qrain_cmp
    # this is the max value at any level,
    # similar to composite radar reflectivity
    long_name: Composite rain water mixing ratio
    units: kg kg-1  # (kg rain water) (kg air)^-1
    long_units: (kg rain water) (kg air gas)-1
    dims: *dims_tyx

  QRAINsfc.npy:
    name: qrain_sfc
    long_name: Rain water mixing ratio at the surface
    units: kg kg-1
    long_units: (kg rain water) (kg air gas)-1
    dims: *dims_tyx  # original WRF variable QRAIN is tzyx

  RAINNC.npy:
    name: rainnc  # nc: non-convective
    long_name: Accumulated rain from non-convective clouds  # ?? accumulated (over what?) total in grid cell
    units: mm  # (rain volume / xy area of grid cell)
    dims: *dims_tyx

  SST.npy:
    name: sst
    long_name: Sea surface temperature
    units: K
    dims: *dims_tyx
    cf_standard_name: sea_surface_temperature

  # XLAT and XLONG should be the grid-cell centers
  # TODO: note this in attrs somehow?
  XLAT.npy:
    name: lat
    long_name: Latitude
    units: "\u00B0N"  # `°N` gets read as `Â°N` for some reason...
    dims: *dims_y
    cf_standard_name: latitude
    cf_units: degree_north

  XLONG.npy:
    name: lon
    long_name: Longitude
    units: "\u00B0E"
    dims: *dims_x
    cf_standard_name: longitude
    cf_units: degree_east

  # the following variables were originally on model levels (eta levels)
  # but Dr. Young interpolated them to a grid with constant dz = 500 m

  qCloudInterp.npy:
    name: qcloud
    long_name: Cloud water mixing ratio
    units: kg kg-1
    long_units: (kg cloud water) (kg air gas)-1
    dims: *dims_tzyx
    # this CF variable is close, but mass frac not mixing ratio:
    # cf_standard_name: mass_fraction_of_cloud_liquid_water_in_air
    # cf_units: 1

  qRainInterp.npy:
    name: qrain
    long_name: Rain water mixing ratio
    units: kg kg-1
    long_units: (kg rain water) (kg air gas)-1
    dims: *dims_tzyx
    # this CF variable is close, but mass frac not mixing ratio:
    # cf_standard_name: mass_fraction_of_liquid_precipitation_in_air
    # cf_units: 1

  qVaporInterp.npy:
    name: qvapor
    long_name: Water vapor mixing ratio
    units: kg kg-1
    long_units: (kg water vapor) (kg air gas)-1
    dims: *dims_tzyx
    # a related CF variable is
    # cf_standard_name: mass_concentration_of_water_vapor_in_air
    # cf_units: kg m-3

  tInterp.npy:
    name: theta  # also the AMIP name
    long_name: Potential temperature $\theta$
    # in WRF output t is perturbation potential temperature (theta-t0)
    # Dr. Young seems to have added t0 (the base state potential temperature) back in
    units: K
    dims: *dims_tzyx
    cf_standard_name: air_potential_temperature
    cf_units: K

  uInterp.npy:
    name: u  # AMIP is `ua`
    long_name: $u$ (x-wind)
    units: m s-1
    dims: *dims_tzyx
    cf_standard_name: eastward_wind

  vInterp.npy:
    name: v  # AMIP is `va`
    long_name: $v$ (y-wind)
    units: m s-1
    dims: *dims_tzyx
    cf_standard_name: northward_wind

  wInterp.npy:
    name: w
    long_name: $w$ (z-wind)
    units: m s-1
    dims: *dims_tzyx
    cf_standard_name: upward_air_velocity
